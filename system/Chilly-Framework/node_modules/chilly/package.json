{
  "name": "chilly",
  "version": "0.2.0",
  "author": {
    "name": "Taj Pelc",
    "email": "info@chillyframework.com"
  },
  "description": "A platform for multiplayer HTML5 games",
  "keywords": [
    "games",
    "multiplayer",
    "server",
    "static",
    "sync"
  ],
  "main": "./server.js",
  "repository": {
    "type": "git",
    "url": "git@github.com:TajPelc/Chilly-Framework.git"
  },
  "dependencies": {
    "connect": ">=1.8.6"
  },
  "license": [
    "MIT",
    "GPLv2"
  ],
  "engine": {
    "node": ">=0.6"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "# Chilly Framework #\r\n## About ##\r\n\r\n**[Chilly Framework](http://www.chillyframework.com/)** is a HTML5 game development platform running on [Node.js](http://nodejs.org/) using [Connect](http://www.senchalabs.org/connect/) middleware.\r\n\r\nIt was built in response to our needs while developing a HTML5 game called TankCraft.\r\n\r\nIt acts as multiplayer server which also serves static files and uses Ajax requests to transfer data between the front end and the back end. The main feature is syncing player actions or broadcasting data across multiple clients using Chilly update channels.\r\n\r\nBehind the hood requests and long-polling are handled by Chilly. We provide an interface to use these features easily.\r\n\r\nThe back end logic of a game can be built using Chilly Framework methods and if needed, additional Node.js modules like MySQL support, can be added easily using [NPM modules](http://search.npmjs.org/).\r\n\r\nChilly front end script takes care of ajax requests and broadcasting updates. And triggers updates whenever a client receives data. Developers are free to use whatever suits them to build the game. We used the [CraftyJS](http://craftyjs.com/) library for graphics and animations, jQuery for the UI and SoundManager for the sound.\r\n\r\n## Installation ##\r\n\r\n* Download and [install Node.js](https://github.com/joyent/node/wiki/Installation)  on your platform of choice.\r\n* Download Chilly Framework, using for instance `git clone https://github.com/TajPelc/Chilly-Framework.git` or by [downloading a zip](https://github.com/TajPelc/Chilly-Framework/zipball/master).\r\n* You are ready to go, start the server with `node server.js` from the folder where you extracted the files.\r\n\r\n## Structure ##\r\nThis is a basic structure for a Chilly Framework project. It's separated to a back (protected) and a front end (public).\r\n\r\n```\r\nframework\r\n  chilly-0.2.js     // Chilly Framework back end script\r\nnode_modules        // additional Node.js modules\r\nprotected           // back end files\r\n  actions.js        // define your actions\r\n  config.js         // server and game config\r\n  helpers.js        // define custom helper functions\r\n  models.js         // define your models\r\npublic              // static content served by the web server\r\n  js\r\n    libraries\r\n      chilly-0.2.js // Chilly Framework front end script\r\n  css\r\n  img\r\nserver.js           // starts the server\r\n```\r\n\r\n## How to use it ##\r\n\r\n\r\n###Front end###\r\n______________________________________________\r\n\r\nStart by creating an index.html file in `/public/index.html`, then run the server with `node server.js`. Navigate to `http://localhost:3000/` and you should see the contents of the file.\r\n\r\nInclude the Chilly Framework front end library with `<script src=\"/js/libraries/chilly-0.2.js\" />`. Create your own JavaScript file, for example game.js and include it.\r\n\r\nTo start Chilly Framework call `Chilly.init();`. This triggers an `init` event.\r\n\r\nTo bind events use:\r\n\r\n```javascript\r\nChilly.bind('init', function(e) { ... /* load assets, sprites, sounds, etc */ });\r\n```\r\n\r\n\r\nTo trigger custom events use:\r\n\r\n```javascript\r\nChilly.trigger('eventName', customData);\r\n```\r\n\r\nTo issue request to the back-end use:\r\n\r\n```javascript\r\nChilly.request('actionName', {\r\n  data: { // optional\r\n    custom1: 'a',\r\n    custom2: 'b'\r\n  },\r\n  success: function(data) {\r\n     ... // do stuff\r\n  },\r\n  error: function(data) { // optional\r\n     ... // display errors\r\n  }\r\n});\r\n```\r\n\r\nDefine code for every action that is transmitted over the update channel using:\r\n\r\n```javascript\r\nChilly.onUpdate('gameOver', function(data) {\r\n   ... // display the score\r\n});\r\n```\r\n\r\nListen to additional channels created on the back end using:\r\n\r\n```javascript\r\nChilly.listen('chat', function(data){\r\n  ... // display broadcasted message\r\n});\r\n```\r\n\r\n\r\n###Back end###\r\n______________________________________________\r\n\r\nOpen `actions.js` and define additional update channels with:\r\n\r\n```javascript\r\nChilly.createChannel('chat');\r\n```\r\n\r\nOpen `actions.js` and define responses to requests send from the front end by `Chilly.request` with:\r\n\r\n```javascript\r\nChilly.action('login', {\r\n    user: function(request) { // if user is already logged in\r\n        ... // respond with an error\r\n        request.respond.error('Already logged in.');\r\n    },\r\n    anonymous: function(request) { // (optional)\r\n\t    ... // log the user in\r\n        request.respond.ok('You are now logged in.');\r\n    }\r\n});\r\n```\r\n\r\nOpen `models.js` and extend Game.js and define your own models that will be used by the game.\r\n\r\n## Additional help ##\r\nCheck the source code comments for both chilly-0.2.js files for more information. Visit [chillyframework.com](http://chillyframework.com/).\r\n\r\n## License ##\r\nCopyright 2012, Taj Pelc\r\n\r\nDual licensed under the MIT or GPL Version 2 licenses.\r\n[http://chillyframework.org/license/](http://chillyframework.org/license/)\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/TajPelc/Chilly-Framework/issues"
  },
  "_id": "chilly@0.2.0",
  "_from": "chilly@"
}
